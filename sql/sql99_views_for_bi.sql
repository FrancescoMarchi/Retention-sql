CREATE OR REPLACE VIEW retention.v_tenure_trend_monthly AS WITH m AS (SELECT tenure_months AS month_n, AVG(churn_flag::int)::numeric AS churn_rate FROM retention.customers WHERE tenure_months IS NOT NULL GROUP BY 1) SELECT month_n, ROUND(100*churn_rate,2) AS churn_pct, ROUND(100*AVG(churn_rate) OVER (ORDER BY month_n ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2) AS churn_pct_roll3 FROM m;
CREATE OR REPLACE VIEW retention.v_decile_churn AS SELECT charge_decile, COUNT(*) AS customers, SUM(churn_flag::int) AS churners, ROUND(100.0*AVG(churn_flag::int),2) AS churn_pct, ROUND(AVG(monthly_charges),2) AS avg_monthly_charge FROM retention.v_customers_features GROUP BY charge_decile ORDER BY charge_decile;
CREATE OR REPLACE VIEW retention.v_at_risk_calllist AS SELECT customer_id, gender, senior_citizen, partner, dependents, tenure_months, contract_type, payment_method, monthly_charges, charge_decile, churn_flag, (CASE WHEN contract_type='Month-to-month' THEN 2 ELSE 0 END + CASE WHEN charge_decile>=7 THEN 1 ELSE 0 END + CASE WHEN tenure_months<=12 THEN 1 ELSE 0 END + CASE WHEN lower(payment_method) LIKE '%electronic check%' THEN 1 ELSE 0 END + CASE WHEN senior_citizen AND NOT partner THEN 1 ELSE 0 END) AS risk_score, TRIM(BOTH ' |' FROM (CASE WHEN contract_type='Month-to-month' THEN 'High risk: Month-to-Month |' ELSE '' END || CASE WHEN charge_decile>=7 THEN 'High spending |' ELSE '' END || CASE WHEN tenure_months<=12 THEN 'Low tenure |' ELSE '' END || CASE WHEN lower(payment_method) LIKE '%electronic check%' THEN 'Electronic check |' ELSE '' END || CASE WHEN senior_citizen AND NOT partner THEN 'Senior & solo |' ELSE '' END)) AS risk_reason, TRIM(BOTH ' |' FROM (CASE WHEN contract_type='Month-to-month' THEN 'Offer 1-year discount |' ELSE '' END || CASE WHEN charge_decile>=7 THEN 'Loyalty credit |' ELSE '' END || CASE WHEN tenure_months<=12 THEN 'Proactive onboarding call |' ELSE '' END || CASE WHEN lower(payment_method) LIKE '%electronic check%' THEN 'Move to autopay |' ELSE '' END || CASE WHEN senior_citizen AND NOT partner THEN 'Concierge support |' ELSE '' END)) AS suggested_offer FROM retention.v_customers_features WHERE contract_type='Month-to-month' OR charge_decile>=7 OR tenure_months<=12 OR lower(payment_method) LIKE '%electronic check%';
CREATE OR REPLACE VIEW retention.v_at_risk_calllist_compact AS SELECT customer_id, tenure_months, monthly_charges, charge_decile, contract_type, payment_method, risk_score, risk_reason, suggested_offer FROM retention.v_at_risk_calllist;
CREATE OR REPLACE VIEW retention.v_at_risk_top200 AS SELECT * FROM retention.v_at_risk_calllist_compact ORDER BY risk_score DESC, charge_decile DESC, tenure_months ASC LIMIT 200;
CREATE OR REPLACE VIEW retention.v_churn_summary AS SELECT 'overall'::text AS dim, 'all'::text AS val, COUNT(*) AS customers, SUM(churn_flag::int) AS churners, ROUND(100.0*AVG(churn_flag::int),2) AS churn_pct FROM retention.customers UNION ALL SELECT 'contract_type', contract_type, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.customers GROUP BY contract_type UNION ALL SELECT 'payment_method', payment_method, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.customers GROUP BY payment_method UNION ALL SELECT 'tenure_bucket', tenure_bucket, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.v_customers_features GROUP BY tenure_bucket UNION ALL SELECT 'charge_decile', charge_decile::text, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.v_customers_features GROUP BY charge_decile UNION ALL SELECT 'senior', CASE WHEN senior_citizen THEN 'Senior' ELSE 'Non-senior' END, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.customers GROUP BY 2 UNION ALL SELECT 'partner', CASE WHEN partner THEN 'Partner' ELSE 'No partner' END, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.customers GROUP BY 2 UNION ALL SELECT 'dependents', CASE WHEN dependents THEN 'Dependents' ELSE 'No dependents' END, COUNT(*), SUM(churn_flag::int), ROUND(100.0*AVG(churn_flag::int),2) FROM retention.customers GROUP BY 2;
